---
layout: post
title: 'Web Weekly #2'
date: '2016-03-27 17:02:08'
---

<pre><code class="language-css">border-top-style: reactive;
</code></pre>

## Programaci√≥n Reactiva

> "Se espera que un sistema reactivo interaccione con su entorno, intercalando las entradas y las salidas de forma temporal, lo que quiere decir que dentro de una cantidad de tiempo adecuado (lo que se considere adecuado depende del dominio de aplicaci√≥n) el sistema devuelva una respuesta en funci√≥n de las entradas recibidas y contin√∫e con el ciclo de ejecuci√≥n." *[
Fernando Sancho Caparrini](http://www.cs.us.es/~fsancho/?e=111)*

La semana pasada se despert√≥ en m√≠ la curiosidad sobre la programaci√≥n reactiva, a ra√≠z de este v√≠deo:

<iframe width="560" height="315" src="https://www.youtube.com/embed/COviCoUtwx4" frameborder="0" allowfullscreen></iframe>

A modo de resumen, la **programaci√≥n reactiva** es un paradigma de programaci√≥n, una programaci√≥n que se enfoca a la gesti√≥n as√≠ncrona de los datos (llamadas AJAX, eventos, workers, sockets...) Nos interesa, por lo tanto, utilizar programaci√≥n reactiva cuando hemos de realizar un alto n√∫mero de operaciones as√≠ncronas. Uno de los ejemplos que usa el v√≠deo es el de cancelar una llamada AJAX si el usuario cancela la acci√≥n que la desencadena. Explica [RxJS](https://github.com/Reactive-Extensions/RxJS), un proyecto desarrollado por **Microsoft**, compuesto por una serie de librer√≠as que extiende la funcionalidad reactiva. Introduce los objetos **Observer**, que introduce los distintos flujos de datos en el flujo de eventos, y el objeto **Observable**, que notifica al observer cuando un evento ocurre.

> Reactive Extensions for JavaScript unify both the world of Promises, callbacks as well as evented data such as DOM Input, Web Workers, and Web Sockets. Unifying these concepts enables rich composition.

En relaci√≥n a este tema, llegu√© a [este post](https://medium.com/reactive-programming/what-is-reactive-programming-bc9fa7f4a7fc#.tw800o5gv), que explica los principios de la programaci√≥n reactiva. Para entenderlo un poco mejor, nos expone los **cuatro principios** que ha de tener una aplicaci√≥n desarrollada con este paradigma:

* **Responsive:** *Un sistema responsive reacciona r√°pidamente a todos los usuarios (tanto en escenarios favorables como desfavorables) para asegurar una experiencia de usuario positiva y consistente*
* **Scalable:** *Un sistema escalable es f√°cil de actualizar bajo demanda para asegurar que seguir√° siendo responsive bajo distintas condiciones de carga*
* **Resilient:** *Un sistema flexible aplica principios de dise√±o y arquitectura para asegurar que es responsive en escenarios favorables y desfavorables.*
* **Message-driven:** *Un arquitectura conducida por mensajes es la base de las aplicaciones reactivas. Tiene que ser dirigida por eventos, basada en actores o una combinaci√≥n de ambos.*

## JavaScript en 2016

Un post recopilatorio que recomiendo esta semana es [State of the Art JavaScript in 2016 ](https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.phsllzxhg). Habla de los frameworks/tecnolog√≠as que m√°s se utilizan/van a utilizarse este a√±o (React, Redux, ES6, Babel, Webpack...). Al final, ofrece una serie de links para leer m√°s sobre estos temas. Creo que es un buen post para mantenerse up-to-date y que es interesante leer.üëå

## Houdini

Un problema al que nos enfrentamos a diario los que escribimos CSS es el de la compatibilidad entre navegadores. Houdini no es un nuevo framework m√°gico que hay que aprender, si es lo que al leer tem√≠ais (como yo). Es m√°s bien un **objetivo** de la W3C para que desaparezca este problema.

Se trata de introducir un nuevo set de APIs que extentiendan el propio CSS. El [art√≠culo](https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/) explica las siguientes cuestiones:

* ¬øQu√© problema exactamente quiere resolver?
* ¬øEs una buena idea?
* ¬øC√≥mo ayudar√° a los desarrolladores a construir sitios web?

![](img/content/images/2016/03/virtual-reality-2.jpg)
Imagen: [http://vrdeveloper.org/](http://vrdeveloper.org/)
# WebVR

Es indudable que la realidad aumentada y la realidad virtual (AR, VR) est√°n ya entre nosotros, incluyendo la web. Un claro ejemplo es el proyecto [MozVR](http://mozvr.com/)

Pero, ¬øqu√© necesitamos para llevar esta tecnolog√≠a a la web? En este [post](http://www.sitepoint.com/how-to-build-vr-on-the-web-today/) encontramos el *stack* tecnol√≥gico que va a empezar pegando fuerte en este √°rea. Entre ellos se encuentra, como no pod√≠a ser menos, [three.js](http://threejs.org/). Existe un boilerplate open source que podemos encontrar en [GitHub](https://github.com/borismus/webvr-boilerplate). La primera versi√≥n del API estar√° disponible, dicen, este verano en [Firefox Nightly](https://nightly.mozilla.org/). Si ten√©is inter√©s, pod√©is empezar a üëì [estudiar la documentaci√≥n](https://mozvr.github.io/webvr-spec/)üëì de WebVR. Para saber cu√°ndo estar√° listo, existe la web [is WebVR ready?](https://iswebvrready.org/). Para mantenerse al d√≠a en este tema, tambi√©n conviene seguir el [blog](http://blog.tojicode.com/) de [Brandon Jones](https://twitter.com/Tojiro), desarrollador de WebGL y WebVR para Chrome en Google. Tambi√©n hablan del tema en el siguiente [tumblr](http://webglvr.tumblr.com/).

La posibilidad de utilizar los smartphones como gafas de realidad aumentada junto con otras tecnolog√≠as como por ejemplo el [LeapMotion](https://www.leapmotion.com/) pueden dar un juego brutal. Y no s√≥lo eso, sino que la experiencia de usuario (UX) tambi√©n tiene un papel **esencial** en todo esto:

<iframe width="560" height="315" src="https://www.youtube.com/embed/ZOaOYTOpwyM" frameborder="0" allowfullscreen></iframe>

Como v√©is, este campo me llama mucho la atenci√≥n y me interesa bastante.

## NPM Drama

Estoy escribiendo un post m√°s extenso sobre este tema, as√≠ que aqu√≠ lo comentar√© por encima, porque no pod√≠a no mencionarlo en √©ste. Ha sido, sin duda, uno de los temas m√°s comentados esta semana.

Muy brevemente: La empresa [Kik](https://www.kik.com/) obliga a [Azer Ko√ßulu](https://twitter.com/azerbike), desarrollador de una librer√≠a de NPM con el mismo nombre, a borrar esta librer√≠a open source ya que el nombre lo tienen pillado ellos. √âl se niega. Kik habla con NPM, y ellos la borran. Azer decide borrar, por lo tanto, todas sus librer√≠as que ten√≠a subidas en NPM ya que opina que el hecho de eliminar la librer√≠a de otra persona sin su consentimiento no encaja con la filosof√≠a que tiene sobre las librer√≠as open source. Desafortunadamente, Azer hab√≠a escrito una librer√≠a de **once l√≠neas** que utilizaban React, Babel y otros paquetes archiconocidos. Resultado: estos paquetes se rompen, todos los proyectos que los utilizaban se rompen. He aqu√≠ el **drama**, pero no voy a decir nada m√°s hasta el post üòÅ
## Otros
* [Generaci√≥n de documentaci√≥n en JS](http://www.fusioncharts.com/blog/2013/12/jsdoc-vs-yuidoc-vs-doxx-vs-docco-choosing-a-javascript-documentation-generator/)
* [Truquillos frontend](https://www.smashingmagazine.com/2016/03/dirty-tricks-dark-corners-front-end-slides-pdf/)
* [Animating with React, Redux, and d3](http://swizec.com/blog/animating-with-react-redux-and-d3/swizec/6775)

Espero que os haya gustado este nuevo Web Weekly, ¬°nos vemos la semana que viene en el siguiente!

Imagen de portada: [gigaom](https://gigaom.com/2015/02/02/responsive-web-design-is-coming-to-vr/)
